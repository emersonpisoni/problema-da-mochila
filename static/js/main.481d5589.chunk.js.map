{"version":3,"sources":["components/World/index.js","App.js","index.js"],"names":["World","useState","tamanhoPopulação","setTamanhoPopulação","numeroIterações","setNumeroIterações","porcentagemDaPopulaçãoApta","setPorcentagemDaPopulaçãoApta","intervaloGeração","setIntervaloGeração","taxaMutação","setTaxaMutação","limiarAceite","setLimiarAceite","pesoMaximoMochila","setPesoMaximoMochila","pesoMinimoItem","setPesoMinimoItem","pesoMaximoItem","setPesoMaximoItem","valorMinimoItem","setValorMinimoItem","valorMaximoItem","setValorMaximoItem","shouldGeneratePopulation","setShouldGeneratePopulation","population","setPopulation","foundSolution","setFoundSolution","threshold","setThreshold","iteraçõesRestantes","setIteraçõesRestantes","mochilaPerfeitaValor","randomIntFromInterval","min","max","Math","floor","random","useEffect","individuosAdeptos","forEach","individuo","isAdepto","length","getPorcentagemAptos","continueGeneration","removeNotNumbers","text","replace","somaArray","array","reduce","acc","current","peso","valor","getIndividuo","i","push","fitness","getFitness","arrayPeso","map","val","arrayValor","Individuo","className","_","index","value","key","style","display","marginRight","isLastValue","getItemClassName","População","crossOver","bestPais","pioresPaisPositions","bestPaisWithoutFitness","pai","splice","newPopulationPoint1","newPopulationPoint2","newPopulation","isPar","j","individuosASeremMutados","parseInt","randomIndividuoPosition","randomPesoValor","substituiPioresPais","currentPopulation","position","individuosDentroDoPesoPositions","individuosForaDoPesoPositions","bestPaisOrderedByValue","filter","isDentroDoPeso","sort","a","b","diff","pioresMelhores","slice","selecionaMelhoresPais","onChange","e","target","onClick","tamanho","população","getPopulação","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.481d5589.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport const World = () => {\r\n  const [tamanhoPopulação, setTamanhoPopulação] = useState(20);\r\n  const [numeroIterações, setNumeroIterações] = useState(30);\r\n  const [porcentagemDaPopulaçãoApta, setPorcentagemDaPopulaçãoApta] = useState(80);\r\n  const [intervaloGeração, setIntervaloGeração] = useState(4);\r\n  const [taxaMutação, setTaxaMutação] = useState(20);\r\n  const [limiarAceite, setLimiarAceite] = useState(90);\r\n  const [pesoMaximoMochila, setPesoMaximoMochila] = useState(50);\r\n  const [pesoMinimoItem, setPesoMinimoItem] = useState(1);\r\n  const [pesoMaximoItem, setPesoMaximoItem] = useState(10);\r\n  const [valorMinimoItem, setValorMinimoItem] = useState(1);\r\n  const [valorMaximoItem, setValorMaximoItem] = useState(10);\r\n\r\n  const [shouldGeneratePopulation, setShouldGeneratePopulation] = useState(false);\r\n  const [population, setPopulation] = useState([]);\r\n  const [foundSolution, setFoundSolution] = useState(false);\r\n  const [threshold, setThreshold] = useState(0);\r\n  const [iteraçõesRestantes, setIteraçõesRestantes] = useState(numeroIterações);\r\n\r\n  const tamanhoMochila = 10;\r\n  const mochilaPerfeitaValor = tamanhoMochila * valorMaximoItem;\r\n\r\n  useEffect(() => {\r\n    setShouldGeneratePopulation(false);\r\n  }, [tamanhoPopulação]);\r\n\r\n  useEffect(() => {\r\n    let individuosAdeptos = 0;\r\n\r\n    population.forEach((individuo) => {\r\n      if (isAdepto(individuo[individuo.length - 1][0], individuo[individuo.length - 1][1])) {\r\n        individuosAdeptos++;\r\n      }\r\n    });\r\n\r\n    const threshold = getPorcentagemAptos(individuosAdeptos, tamanhoPopulação);\r\n\r\n    setThreshold(threshold);\r\n\r\n    if (threshold < porcentagemDaPopulaçãoApta && population.length && iteraçõesRestantes > 0) {\r\n      setIteraçõesRestantes((iteraçõesRestantes) => iteraçõesRestantes - 1);\r\n      continueGeneration();\r\n      return;\r\n    }\r\n\r\n    population.length && threshold >= porcentagemDaPopulaçãoApta && setFoundSolution(true)\r\n  }, [population]);\r\n\r\n  function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  const removeNotNumbers = (text) => {\r\n    return text.replace(/\\D/g, \"\");\r\n  };\r\n\r\n  const somaArray = (array) => {\r\n    return array.reduce((acc, current) => acc + current, 0);\r\n  };\r\n\r\n  const getPorcentagemAptos = (individuosAdeptos, tamanhoPopulação) => {\r\n    return (individuosAdeptos * 100) / tamanhoPopulação;\r\n  };\r\n\r\n  const isAdepto = (peso, valor) => {\r\n    return peso <= pesoMaximoMochila && (valor * 100) / mochilaPerfeitaValor >= limiarAceite;\r\n  };\r\n\r\n  const getPopulação = (tamanho) => {\r\n    const população = [];\r\n\r\n    for (let i = 0; i < tamanho; i++) {\r\n      população.push(getIndividuo());\r\n    }\r\n\r\n    return população;\r\n  };\r\n\r\n  const getIndividuo = () => {\r\n    const individuo = [];\r\n\r\n    for (let i = 0; i < tamanhoMochila; i++) {\r\n      individuo.push([randomIntFromInterval(pesoMinimoItem, pesoMaximoItem), randomIntFromInterval(valorMinimoItem, valorMaximoItem)]);\r\n    }\r\n    const fitness = getFitness(individuo);\r\n    individuo.push(fitness);\r\n\r\n    return individuo;\r\n  };\r\n\r\n  const getFitness = (individuo) => {\r\n    const arrayPeso = individuo.map((val) => val[0]);\r\n    const arrayValor = individuo.map((val) => val[1]);\r\n    const fitness = [somaArray(arrayPeso), somaArray(arrayValor)];\r\n\r\n    return fitness;\r\n  };\r\n\r\n  const Individuo = ({ individuo }) => {\r\n    return (\r\n      <div className=\"individuo\">\r\n        <div className=\"individuo-header\">\r\n          {individuo.map((_, index) => {\r\n            const isLastValue = index === individuo.length - 1;\r\n            const value = isLastValue ? \"F\" : index + 1;\r\n\r\n            return <span key={index}>{value}</span>;\r\n          })}\r\n        </div>\r\n        <div style={{ display: \"flex\", marginRight: -1 }}>\r\n          <div className=\"individuo-title\">\r\n            <span>P</span>\r\n            <span>V</span>\r\n          </div>\r\n          {individuo.map(([peso, valor], index) => {\r\n            const isLastValue = index === individuo.length - 1;\r\n            const getItemClassName = isLastValue && isAdepto(peso, valor) ? \"adepto\" : isLastValue ? \"nao-adepto\" : \"\";\r\n            return (\r\n              <div key={index} className={`item ${getItemClassName}`}>\r\n                <span>{peso}</span>\r\n                <span>{valor}</span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const População = ({ population }) => {\r\n    return (\r\n      <div className=\"populacao\">\r\n        <span className=\"populacao-title\">População</span>\r\n        {population.map((individuo, index) => (\r\n          <Individuo key={index} individuo={individuo} />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    setFoundSolution(false);\r\n    setThreshold(0);\r\n    setPopulation(getPopulação(tamanhoPopulação));\r\n    setShouldGeneratePopulation(true);\r\n    setIteraçõesRestantes(numeroIterações);\r\n  };\r\n\r\n  const selecionaMelhoresPais = (population) => {\r\n    const individuosDentroDoPesoPositions = [];\r\n    const individuosForaDoPesoPositions = [];\r\n\r\n    // filtra por individuos dentro do peso\r\n    const individuosDentroDoPeso = [...population].filter((individuo, index) => {\r\n      const isDentroDoPeso = individuo[individuo.length - 1][0] <= pesoMaximoMochila;\r\n\r\n      isDentroDoPeso\r\n        ? individuosDentroDoPesoPositions.push({ index, value: individuo[individuo.length - 1][1] })\r\n        : individuosForaDoPesoPositions.push(index);\r\n\r\n      return isDentroDoPeso;\r\n    });\r\n\r\n    // ordena individuos dentro do peso pelo valor\r\n    let bestPaisOrderedByValue = individuosDentroDoPeso.sort((a, b) => b[b.length - 1][1] - a[a.length - 1][1]);\r\n\r\n    // adiciona individuos fora do peso para ser criado\r\n    // novos individuos caso não tenha individuos dentro do peso suficientes\r\n    if (bestPaisOrderedByValue.length < intervaloGeração) {\r\n      const diff = intervaloGeração - bestPaisOrderedByValue.length;\r\n\r\n      for (let i = 0; i < diff; i++) {\r\n        bestPaisOrderedByValue.push(population[individuosForaDoPesoPositions[i]]);\r\n      }\r\n    }\r\n\r\n    // adiciona individuos dentro do peso para serem substituídos no crossover\r\n    //  caso não tenha individuos fora do peso suficientes\r\n    if (individuosForaDoPesoPositions.length < intervaloGeração) {\r\n      const diff = intervaloGeração - individuosForaDoPesoPositions.length;\r\n\r\n      const pioresMelhores = individuosDentroDoPesoPositions.sort((a, b) => a.value - b.value);\r\n\r\n      for (let i = 0; i < diff; i++) {\r\n        individuosForaDoPesoPositions.push(pioresMelhores[i].index);\r\n      }\r\n    }\r\n\r\n    // mantém apenas os individuos pelo intervalo de geração\r\n    const bestPais = bestPaisOrderedByValue.slice(0, intervaloGeração);\r\n    const pioresPaisPositions = individuosForaDoPesoPositions.slice(0, intervaloGeração);\r\n\r\n    crossOver(bestPais, pioresPaisPositions);\r\n  };\r\n\r\n  const crossOver = (bestPais, pioresPaisPositions) => {\r\n    // remove posição de fitness para calcular\r\n    const bestPaisWithoutFitness = bestPais.map((pai) => {\r\n      const array = [...pai];\r\n      return array.splice(0, array.length - 1);\r\n    });\r\n\r\n    // cria novos individuos a partir dos melhores pais\r\n    let newPopulationPoint1 = [];\r\n    let newPopulationPoint2 = [];\r\n\r\n    const newPopulation = [];\r\n\r\n    bestPaisWithoutFitness.forEach((individuo, i) => {\r\n      const isPar = (i + 1) % 2 === 0;\r\n      individuo.forEach((value, j) => {\r\n        const isPoint1 = j < individuo.length / 2;\r\n\r\n        isPoint1 ? newPopulationPoint1.push(value) : newPopulationPoint2.push(value);\r\n      });\r\n      if (isPar) {\r\n        newPopulation.push(newPopulationPoint1, newPopulationPoint2);\r\n        newPopulationPoint1 = [];\r\n        newPopulationPoint2 = [];\r\n      }\r\n    });\r\n\r\n    // mutação\r\n    const individuosASeremMutados = parseInt((intervaloGeração * taxaMutação) / 100) || 1;\r\n    for (let i = 0; i < individuosASeremMutados; i++) {\r\n      const individuo = [...newPopulation[i]];\r\n      const randomIndividuoPosition = randomIntFromInterval(0, individuo.length - 1);\r\n      const randomPesoValor = [randomIntFromInterval(pesoMinimoItem, pesoMaximoItem), randomIntFromInterval(valorMinimoItem, valorMaximoItem)];\r\n\r\n      individuo[randomIndividuoPosition] = randomPesoValor;\r\n\r\n      newPopulation[i] = individuo;\r\n    }\r\n\r\n    substituiPioresPais(newPopulation, pioresPaisPositions);\r\n  };\r\n\r\n  const substituiPioresPais = (newPopulation, pioresPaisPositions) => {\r\n    // remove posição de fitness para calcular\r\n    const currentPopulation = [...population].map((pai) => {\r\n      const array = [...pai];\r\n      return array.splice(0, array.length - 1);\r\n    });\r\n\r\n    // currentPopulation recebe a nova população no lugar das posições dos piores pais\r\n    pioresPaisPositions.forEach((position, index) => (currentPopulation[position] = newPopulation[index]));\r\n\r\n    for (let i = 0; i < currentPopulation.length; i++) {\r\n      const fitness = getFitness(currentPopulation[i]);\r\n\r\n      currentPopulation[i].push(fitness);\r\n    }\r\n\r\n    setPopulation(currentPopulation);\r\n  };\r\n\r\n  const continueGeneration = () => {\r\n    selecionaMelhoresPais(population);\r\n  };\r\n\r\n  const renderPopulation = () => {\r\n    return shouldGeneratePopulation && <População population={population} />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"world\">\r\n      <div className=\"world-container\">\r\n        <div className=\"information\">\r\n          ------------------------------------------------\r\n          <span>tamanhoPopulação: {tamanhoPopulação}</span>\r\n          <span>numeroDeIterações: {numeroIterações}</span>\r\n          <span>porcentagemDaPopulaçãoApta: {porcentagemDaPopulaçãoApta}%</span>\r\n          <span>intervaloGeração: {intervaloGeração}</span>\r\n          <span>taxaMutação: {taxaMutação}</span>\r\n          <span>limiarAceite: {limiarAceite}</span>\r\n          <span>pesoMaximoMochila: {pesoMaximoMochila}</span>\r\n          <span>pesoMinimoItem: {pesoMinimoItem}</span>\r\n          <span>pesoMaximoItem: {pesoMaximoItem}</span>\r\n          <span>valorMinimoItem: {valorMinimoItem}</span>\r\n          <span>valorMaximoItem: {valorMaximoItem}</span>\r\n          ------------------------------------------------\r\n          <strong>Solução encontrada? {foundSolution ? \"Sim\" : \"Não\"}</strong>\r\n          <strong>Individuos adeptos (%): {threshold}</strong>\r\n          <span>tamanhoMochila: {tamanhoMochila}</span>\r\n          <strong>Iterações restantes: {iteraçõesRestantes}</strong>\r\n          <span>mochilaPerfeitaValor: {mochilaPerfeitaValor}</span>\r\n          <span>tamanho da população não pode ser menor que o intervalo de geração</span>\r\n        </div>\r\n        <div className=\"form\">\r\n          <div>\r\n            <span>Tamanho da população: </span>\r\n            <input value={tamanhoPopulação} onChange={(e) => setTamanhoPopulação(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Número de iterações: </span>\r\n            <input\r\n              value={numeroIterações}\r\n              onChange={(e) => {\r\n                setNumeroIterações(removeNotNumbers(e.target.value));\r\n                setIteraçõesRestantes(removeNotNumbers(e.target.value));\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <span>Porcentagem de população apta: </span>\r\n            <input value={porcentagemDaPopulaçãoApta} onChange={(e) => setPorcentagemDaPopulaçãoApta(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Intervalo de geração: </span>\r\n            <input value={intervaloGeração} onChange={(e) => setIntervaloGeração(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Taxa de mutação: </span>\r\n            <input value={taxaMutação} onChange={(e) => setTaxaMutação(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Limiar de aceite: </span>\r\n            <input value={limiarAceite} onChange={(e) => setLimiarAceite(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Peso máximo da mochila: </span>\r\n            <input value={pesoMaximoMochila} onChange={(e) => setPesoMaximoMochila(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Peso mínimo e máximo item: </span>\r\n            <input value={pesoMinimoItem} onChange={(e) => setPesoMinimoItem(removeNotNumbers(e.target.value))} />\r\n            <input value={pesoMaximoItem} onChange={(e) => setPesoMaximoItem(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <div>\r\n            <span>Valor mínimo e máximo item: </span>\r\n            <input value={valorMinimoItem} onChange={(e) => setValorMinimoItem(removeNotNumbers(e.target.value))} />\r\n            <input value={valorMaximoItem} onChange={(e) => setValorMaximoItem(removeNotNumbers(e.target.value))} />\r\n          </div>\r\n          <button onClick={onSubmit}>Gerar população</button>\r\n        </div>\r\n      </div>\r\n      {renderPopulation()}\r\n      <button disabled={!population.length} onClick={continueGeneration}>Continuar</button>\r\n      <button disabled={!population.length} onClick={() => setShouldGeneratePopulation(false)}>Cancelar</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\n\nimport { World } from \"./components\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return <World />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}